diff -upr old/linux/drivers/block/aoe/aoechr.c new/linux/drivers/block/aoe/aoechr.c
--- old/linux/drivers/block/aoe/aoechr.c	2009-01-22 11:52:25.000000000 -0500
+++ new/linux/drivers/block/aoe/aoechr.c	2009-01-22 09:32:45.000000000 -0500
@@ -44,7 +44,7 @@ static int emsgs_head_idx, emsgs_tail_id
 static struct semaphore emsgs_sema;
 static spinlock_t emsgs_lock;
 static int nblocked_emsgs_readers;
-static struct class_simple *aoe_class;
+static struct class *aoe_class;
 static struct aoe_chardev chardevs[] = {
 	{ MINOR_ERR, "err" },
 	{ MINOR_DISCOVER, "discover" },
@@ -277,13 +277,13 @@ aoechr_init(void)
 		printk(KERN_ERR "aoe: can't register char device\n");
 		return n;
 	}
-	aoe_class = class_simple_create(THIS_MODULE, "aoe");
+	aoe_class = class_create(THIS_MODULE, "aoe");
 	if (IS_ERR(aoe_class)) {
 		unregister_chrdev(AOE_MAJOR, "aoechr");
 		return PTR_ERR(aoe_class);
 	}
 	for (i = 0; i < ARRAY_SIZE(chardevs); ++i)
-		class_simple_device_add(aoe_class,
+		device_create(aoe_class, NULL,
 				MKDEV(AOE_MAJOR, chardevs[i].minor),
 				NULL, chardevs[i].name);
 
@@ -296,8 +296,8 @@ aoechr_exit(void)
 	int i;
 
 	for (i = 0; i < ARRAY_SIZE(chardevs); ++i)
-		class_simple_device_remove(MKDEV(AOE_MAJOR, chardevs[i].minor));
-	class_simple_destroy(aoe_class);
+		device_destroy(aoe_class, MKDEV(AOE_MAJOR, chardevs[i].minor));
+	class_destroy(aoe_class);
 	unregister_chrdev(AOE_MAJOR, "aoechr");
 }
 
